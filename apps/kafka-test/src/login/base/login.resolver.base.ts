/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLoginArgs } from "./CreateLoginArgs";
import { UpdateLoginArgs } from "./UpdateLoginArgs";
import { DeleteLoginArgs } from "./DeleteLoginArgs";
import { LoginCountArgs } from "./LoginCountArgs";
import { LoginFindManyArgs } from "./LoginFindManyArgs";
import { LoginFindUniqueArgs } from "./LoginFindUniqueArgs";
import { Login } from "./Login";
import { LoginService } from "../login.service";
@graphql.Resolver(() => Login)
export class LoginResolverBase {
  constructor(protected readonly service: LoginService) {}

  async _loginsMeta(
    @graphql.Args() args: LoginCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Login])
  async logins(@graphql.Args() args: LoginFindManyArgs): Promise<Login[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Login, { nullable: true })
  async login(
    @graphql.Args() args: LoginFindUniqueArgs
  ): Promise<Login | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Login)
  async createLogin(@graphql.Args() args: CreateLoginArgs): Promise<Login> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Login)
  async updateLogin(
    @graphql.Args() args: UpdateLoginArgs
  ): Promise<Login | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Login)
  async deleteLogin(
    @graphql.Args() args: DeleteLoginArgs
  ): Promise<Login | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
